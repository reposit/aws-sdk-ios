<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCognitoCredentialsProvider.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoCredentialsProvider</TokenIdentifier>
			<Abstract type="html">An AWSCredentialsProvider that uses Amazon Cognito to fetch temporary credentials tied to an identity.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
            
			
			<NodeRef refid="117"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/setAccessKey:</TokenIdentifier>
			<Abstract type="html">Access Key component of credentials</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *accessKey</Declaration>
			
			
			<Anchor>//api/name/accessKey</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/accessKey</TokenIdentifier>
			<Abstract type="html">Access Key component of credentials</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *accessKey</Declaration>
			
			
			<Anchor>//api/name/accessKey</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoCredentialsProvider/accessKey</TokenIdentifier>
			<Abstract type="html">Access Key component of credentials</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *accessKey</Declaration>
			
			
			<Anchor>//api/name/accessKey</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/setSecretKey:</TokenIdentifier>
			<Abstract type="html">Secret Access Key component of credentials</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *secretKey</Declaration>
			
			
			<Anchor>//api/name/secretKey</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/secretKey</TokenIdentifier>
			<Abstract type="html">Secret Access Key component of credentials</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *secretKey</Declaration>
			
			
			<Anchor>//api/name/secretKey</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoCredentialsProvider/secretKey</TokenIdentifier>
			<Abstract type="html">Secret Access Key component of credentials</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *secretKey</Declaration>
			
			
			<Anchor>//api/name/secretKey</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/setSessionKey:</TokenIdentifier>
			<Abstract type="html">Session Token component of credentials</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *sessionKey</Declaration>
			
			
			<Anchor>//api/name/sessionKey</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/sessionKey</TokenIdentifier>
			<Abstract type="html">Session Token component of credentials</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *sessionKey</Declaration>
			
			
			<Anchor>//api/name/sessionKey</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoCredentialsProvider/sessionKey</TokenIdentifier>
			<Abstract type="html">Session Token component of credentials</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *sessionKey</Declaration>
			
			
			<Anchor>//api/name/sessionKey</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/setExpiration:</TokenIdentifier>
			<Abstract type="html">Date at which these credentials will expire</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDate *expiration</Declaration>
			
			
			<Anchor>//api/name/expiration</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/expiration</TokenIdentifier>
			<Abstract type="html">Date at which these credentials will expire</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDate *expiration</Declaration>
			
			
			<Anchor>//api/name/expiration</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoCredentialsProvider/expiration</TokenIdentifier>
			<Abstract type="html">Date at which these credentials will expire</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDate *expiration</Declaration>
			
			
			<Anchor>//api/name/expiration</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/setIdentityProvider:</TokenIdentifier>
			<Abstract type="html">The identityProvider which is responsible for establishing the identity id and
(optionally) the open id token for use in the Amazon Cognito authflow.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;AWSCognitoIdentityProvider&gt; identityProvider</Declaration>
			
			
			<Anchor>//api/name/identityProvider</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/identityProvider</TokenIdentifier>
			<Abstract type="html">The identityProvider which is responsible for establishing the identity id and
(optionally) the open id token for use in the Amazon Cognito authflow.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;AWSCognitoIdentityProvider&gt; identityProvider</Declaration>
			
			
			<Anchor>//api/name/identityProvider</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoCredentialsProvider/identityProvider</TokenIdentifier>
			<Abstract type="html">The identityProvider which is responsible for establishing the identity id and
(optionally) the open id token for use in the Amazon Cognito authflow.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;AWSCognitoIdentityProvider&gt; identityProvider</Declaration>
			
			
			<Anchor>//api/name/identityProvider</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/setIdentityId:</TokenIdentifier>
			<Abstract type="html">The identity id associated with this provider. This value will be fetched from the keychain
at startup. If you do not want to reuse the existing identity id, you must call the clearKeychain method.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *identityId</Declaration>
			
			
			<Anchor>//api/name/identityId</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/identityId</TokenIdentifier>
			<Abstract type="html">The identity id associated with this provider. This value will be fetched from the keychain
at startup. If you do not want to reuse the existing identity id, you must call the clearKeychain method.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *identityId</Declaration>
			
			
			<Anchor>//api/name/identityId</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoCredentialsProvider/identityId</TokenIdentifier>
			<Abstract type="html">The identity id associated with this provider. This value will be fetched from the keychain
at startup. If you do not want to reuse the existing identity id, you must call the clearKeychain method.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *identityId</Declaration>
			
			
			<Anchor>//api/name/identityId</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/setIdentityPoolId:</TokenIdentifier>
			<Abstract type="html">The identity pool id associated with this provider. Also used to create a namedspaced
keychain area to store identity id and credentials.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *identityPoolId</Declaration>
			
			
			<Anchor>//api/name/identityPoolId</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/identityPoolId</TokenIdentifier>
			<Abstract type="html">The identity pool id associated with this provider. Also used to create a namedspaced
keychain area to store identity id and credentials.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *identityPoolId</Declaration>
			
			
			<Anchor>//api/name/identityPoolId</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoCredentialsProvider/identityPoolId</TokenIdentifier>
			<Abstract type="html">The identity pool id associated with this provider. Also used to create a namedspaced
keychain area to store identity id and credentials.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *identityPoolId</Declaration>
			
			
			<Anchor>//api/name/identityPoolId</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/setLogins:</TokenIdentifier>
			<Abstract type="html">Each entry in logins represents a single login with an identity provider.
The key is the domain of the login provider (e.g. &apos;graph.facebook.com&apos;) and the value is the
OAuth/OpenId Connect token that results from an authentication with that login provider.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *logins</Declaration>
			
			
			<Anchor>//api/name/logins</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/logins</TokenIdentifier>
			<Abstract type="html">Each entry in logins represents a single login with an identity provider.
The key is the domain of the login provider (e.g. &apos;graph.facebook.com&apos;) and the value is the
OAuth/OpenId Connect token that results from an authentication with that login provider.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *logins</Declaration>
			
			
			<Anchor>//api/name/logins</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoCredentialsProvider/logins</TokenIdentifier>
			<Abstract type="html">Each entry in logins represents a single login with an identity provider.
The key is the domain of the login provider (e.g. &apos;graph.facebook.com&apos;) and the value is the
OAuth/OpenId Connect token that results from an authentication with that login provider.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *logins</Declaration>
			
			
			<Anchor>//api/name/logins</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/initWithRegionType:identityPoolId:</TokenIdentifier>
			<Abstract type="html">Initializer for credentials provider with enhanced authentication flow. This is the recommended
constructor for first time Amazon Cognito developers. Will create an instance of AWSEnhancedCognitoIdentityProvider.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithRegionType:(AWSRegionType)regionType identityPoolId:(NSString *)identityPoolId</Declaration>
			<Parameters>
				<Parameter>
					<Name>regionType</Name>
					<Abstract type="html">The region in which your identity pool exists.</Abstract>
				</Parameter><Parameter>
					<Name>identityPoolId</Name>
					<Abstract type="html">The identity pool id for this provider. Value is used to communicate with
Amazon Cognito as well as namespace values stored in the keychain.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithRegionType:identityPoolId:</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/initWithRegionType:identityId:identityPoolId:logins:</TokenIdentifier>
			<Abstract type="html">Initializer for credentials provider with enhanced authentication flow. This is the recommended
method for first time Amazon Cognito developers. Will create an instance of AWSEnhancedCognitoIdentityProvider.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithRegionType:(AWSRegionType)regionType identityId:(NSString *)identityId identityPoolId:(NSString *)identityPoolId logins:(NSDictionary *)logins</Declaration>
			<Parameters>
				<Parameter>
					<Name>regionType</Name>
					<Abstract type="html">The region in which your identity pool exists.</Abstract>
				</Parameter><Parameter>
					<Name>identityId</Name>
					<Abstract type="html">The identity id to initialize this provider. If nil, the provider will attempt
to read from the keychain.</Abstract>
				</Parameter><Parameter>
					<Name>identityPoolId</Name>
					<Abstract type="html">The identity pool id for this provider. Value is used to communicate with
Amazon Cognito as well as namespace values stored in the keychain.</Abstract>
				</Parameter><Parameter>
					<Name>logins</Name>
					<Abstract type="html">The map of logins to link to this identity. Can be nil if identity is unauthenticated.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithRegionType:identityId:identityPoolId:logins:</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/initWithRegionType:identityProvider:unauthRoleArn:authRoleArn:</TokenIdentifier>
			<Abstract type="html">Initializer for credentials provider with pre-created AWSCognitoIdentityProvider. Use this
method when using developer authenticated identities.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithRegionType:(AWSRegionType)regionType identityProvider:(id&lt;AWSCognitoIdentityProvider&gt;)identityProvider unauthRoleArn:(NSString *)unauthRoleArn authRoleArn:(NSString *)authRoleArn</Declaration>
			<Parameters>
				<Parameter>
					<Name>regionType</Name>
					<Abstract type="html">The region in which your identity pool exists.</Abstract>
				</Parameter><Parameter>
					<Name>identityProvider</Name>
					<Abstract type="html">Implementation of AWSCognitoIdentityProvider which is responsible for
acquirind identity id and (optionally) OpenId Connect token.</Abstract>
				</Parameter><Parameter>
					<Name>unauthRoleArn</Name>
					<Abstract type="html">The role ARN to use when getting credentials for unauthenticated identities.
Provider will check the isAuthenticated property of the identity provider to
determine which role to use. Can be nil if unauthenticated identities are not supported or
if using enhanced authentication flow.</Abstract>
				</Parameter><Parameter>
					<Name>authRoleArn</Name>
					<Abstract type="html">The role ARN to use when getting credentials for authenticated identities.
Provider will check the isAuthenticated property of the identity provider to
determine which role to use. Can be nil if authenticated identities are not supported or
if using enhanced authentication flow.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithRegionType:identityProvider:unauthRoleArn:authRoleArn:</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/initWithRegionType:identityId:accountId:identityPoolId:unauthRoleArn:authRoleArn:logins:</TokenIdentifier>
			<Abstract type="html">Initializer for credentials provider with basic auth flow. Only use this method if you still
need to set your IAM roles client side. This method will create an instance of AWSBasicCognitoIdentityProvider.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithRegionType:(AWSRegionType)regionType identityId:(NSString *)identityId accountId:(NSString *)accountId identityPoolId:(NSString *)identityPoolId unauthRoleArn:(NSString *)unauthRoleArn authRoleArn:(NSString *)authRoleArn logins:(NSDictionary *)logins</Declaration>
			<Parameters>
				<Parameter>
					<Name>regionType</Name>
					<Abstract type="html">The region in which your identity pool exists.</Abstract>
				</Parameter><Parameter>
					<Name>identityId</Name>
					<Abstract type="html">The identity id to initialize this provider. If nil, the provider will attempt
to read from the keychain</Abstract>
				</Parameter><Parameter>
					<Name>accountId</Name>
					<Abstract type="html">The AWS account id for the owner of the identity pool. Can be nil as this value
is no longer required</Abstract>
				</Parameter><Parameter>
					<Name>identityPoolId</Name>
					<Abstract type="html">The identity pool id for this provider. Value is used to communicate with
Amazon Cognito as well as namespace values stored in the keychain.</Abstract>
				</Parameter><Parameter>
					<Name>unauthRoleArn</Name>
					<Abstract type="html">The role ARN to use when getting credentials for unauthenticated identities.
Provider will check the isAuthenticated property of the identity provider to
determine which role to use. Can be nil if unauthenticated identities are not supported.</Abstract>
				</Parameter><Parameter>
					<Name>authRoleArn</Name>
					<Abstract type="html">The role ARN to use when getting credentials for authenticated identities.
Provider will check the isAuthenticated property of the identity provider to
determine which role to use. Can be nil if authenticated identities are not supported.</Abstract>
				</Parameter><Parameter>
					<Name>logins</Name>
					<Abstract type="html">The map of logins to link to this identity. Can be nil if identity is unauthenticated.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithRegionType:identityId:accountId:identityPoolId:unauthRoleArn:authRoleArn:logins:</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/refresh</TokenIdentifier>
			<Abstract type="html">Refreshes the locally stored credentials. The SDK automatically calls this method when necessary,
and you do not need to call this method manually.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)refresh</Declaration>
			
			<ReturnValue><Abstract type="html">AWSTask</Abstract></ReturnValue>
			<Anchor>//api/name/refresh</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/getIdentityId</TokenIdentifier>
			<Abstract type="html">Get/retrieve the identity id for this provider. If an identity id is already set on this
provider, no remote call is made and the identity will be returned as a result of the AWSTask
(the identityId is also available as a property).
If no identityId is set on this provider, one will be retrieved from the service.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)getIdentityId</Declaration>
			
			<ReturnValue><Abstract type="html">AWSTask</Abstract></ReturnValue>
			<Anchor>//api/name/getIdentityId</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/clearKeychain</TokenIdentifier>
			<Abstract type="html">Clear ALL saved values for this provider (identityId, credentials, logins)</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>- (void)clearKeychain</Declaration>
			
			
			<Anchor>//api/name/clearKeychain</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoCredentialsProvider/clearCredentials</TokenIdentifier>
			<Abstract type="html">Clear the cached AWS credentials for this provider.</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>- (void)clearCredentials</Declaration>
			
			
			<Anchor>//api/name/clearCredentials</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoCredentialsProvider/shouldResetIdentityId:</TokenIdentifier>
			<Abstract type="html">Internal method used to determine if the identityId should be reset on a provider</Abstract>
			<DeclaredIn>AWSCredentialsProvider.h</DeclaredIn>
			
			<Declaration>+ (BOOL)shouldResetIdentityId:(NSError *)error</Declaration>
			
			
			<Anchor>//api/name/shouldResetIdentityId:</Anchor>
            <NodeRef refid="117"/>
		</Token>
		
        
        
	</File>
</Tokens>