<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCognitoIdentity.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentity</TokenIdentifier>
			<Abstract type="html">&lt;fullname&gt;Amazon Cognito&lt;/fullname&gt;&lt;p&gt;Amazon Cognito is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. Amazon Cognito uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.&lt;/p&gt;&lt;p&gt;Using Amazon Cognito, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon), and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.&lt;/p&gt;&lt;p&gt;To provide end-user credentials, first make an unsigned call to &lt;a&gt;GetId&lt;/a&gt;. If the end user is authenticated with one of the supported identity providers, set the &lt;code&gt;Logins&lt;/code&gt; map with the identity provider token. &lt;code&gt;GetId&lt;/code&gt; returns a unique identifier for the user.&lt;/p&gt;&lt;p&gt;Next, make an unsigned call to &lt;a&gt;GetOpenIdToken&lt;/a&gt;, which returns the OpenID token necessary to call STS and retrieve AWS credentials. This call expects the same &lt;code&gt;Logins&lt;/code&gt; map as the &lt;code&gt;GetId&lt;/code&gt; call, as well as the &lt;code&gt;IdentityID&lt;/code&gt; originally returned by &lt;code&gt;GetId&lt;/code&gt;. The token returned by &lt;code&gt;GetOpenIdToken&lt;/code&gt; can be passed to the STS operation Developer Guide for iOS.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
            
			
			<NodeRef refid="118"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/setConfiguration:</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentity/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCognitoIdentity/defaultCognitoIdentity</TokenIdentifier>
			<Abstract type="html">Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with defaultServiceConfiguration from [AWSServiceManager defaultServiceManager]. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
			<Declaration>+ (instancetype)defaultCognitoIdentity</Declaration>
			
			<ReturnValue><Abstract type="html">The default service client.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultCognitoIdentity</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/initWithConfiguration:</TokenIdentifier>
			<Abstract type="html">Instantiates the service client with the given service configuration.</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithConfiguration:(AWSServiceConfiguration *)configuration</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">The service configuration object.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of the service client.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithConfiguration:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/createIdentityPool:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Creates a new identity pool. The identity pool is a store of user identity information that is specific to your AWS account. The limit on identity pools is 60 per account.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityCreateIdentityPoolInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityIdentityPool</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)createIdentityPool:(AWSCognitoIdentityCreateIdentityPoolInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateIdentityPool service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityIdentityPool. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError, AWSCognitoIdentityErrorLimitExceeded.</Abstract></ReturnValue>
			<Anchor>//api/name/createIdentityPool:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/deleteIdentityPool:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Deletes a user pool. Once a pool is deleted, users will not be able to authenticate with the pool.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityDeleteIdentityPoolInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)deleteIdentityPool:(AWSCognitoIdentityDeleteIdentityPoolInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeleteIdentityPool service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will be nil. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteIdentityPool:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/describeIdentity:</TokenIdentifier>
			<Abstract type="html">DescribeIdentity</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityDescribeIdentityInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityIdentityDescription</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)describeIdentity:(AWSCognitoIdentityDescribeIdentityInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeIdentity service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityIdentityDescription. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/describeIdentity:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/describeIdentityPool:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Gets details about a particular identity pool, including the pool name, ID description, creation date, and current number of users.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityDescribeIdentityPoolInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityIdentityPool</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)describeIdentityPool:(AWSCognitoIdentityDescribeIdentityPoolInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeIdentityPool service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityIdentityPool. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/describeIdentityPool:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/getCredentialsForIdentity:</TokenIdentifier>
			<Abstract type="html">GetCredentialsForIdentity</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetCredentialsForIdentityInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetCredentialsForIdentityResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)getCredentialsForIdentity:(AWSCognitoIdentityGetCredentialsForIdentityInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetCredentialsForIdentity service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityGetCredentialsForIdentityResponse. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInvalidIdentityPoolConfiguration, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/getCredentialsForIdentity:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/getId:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetIdInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetIdResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)getId:(AWSCognitoIdentityGetIdInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetId service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityGetIdResponse. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError, AWSCognitoIdentityErrorLimitExceeded.</Abstract></ReturnValue>
			<Anchor>//api/name/getId:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/getIdentityPoolRoles:</TokenIdentifier>
			<Abstract type="html">GetIdentityPoolRoles</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetIdentityPoolRolesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetIdentityPoolRolesResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)getIdentityPoolRoles:(AWSCognitoIdentityGetIdentityPoolRolesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetIdentityPoolRoles service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityGetIdentityPoolRolesResponse. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/getIdentityPoolRoles:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/getOpenIdToken:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by &lt;a&gt;GetId&lt;/a&gt;. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.&lt;/p&gt;&lt;p&gt;The OpenId token is valid for 15 minutes.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetOpenIdTokenInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetOpenIdTokenResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)getOpenIdToken:(AWSCognitoIdentityGetOpenIdTokenInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetOpenIdToken service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityGetOpenIdTokenResponse. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/getOpenIdToken:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/getOpenIdTokenForDeveloperIdentity:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Registers (or retrieves) a Cognito &lt;code&gt;IdentityId&lt;/code&gt; and an OpenID Connect token for a user authenticated by your backend authentication process. Supplying multiple logins will create an implicit linked account. You can only specify one developer provider as part of the &lt;code&gt;Logins&lt;/code&gt; map, which is linked to the identity pool. The developer provider is the &quot;domain&quot; by which Cognito will refer to your users.&lt;/p&gt;&lt;p&gt;You can use &lt;code&gt;GetOpenIdTokenForDeveloperIdentity&lt;/code&gt; to create a new identity and to link new logins (that is, user credentials issued by a public provider or developer provider) to an existing identity. When you want to create a new identity, the &lt;code&gt;IdentityId&lt;/code&gt; should be null. When you want to associate a new login with an existing authenticated/unauthenticated identity, you can do so by providing the existing &lt;code&gt;IdentityId&lt;/code&gt;. This API will create the identity in the specified &lt;code&gt;IdentityPoolId&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)getOpenIdTokenForDeveloperIdentity:(AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetOpenIdTokenForDeveloperIdentity service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityResponse. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError, AWSCognitoIdentityErrorDeveloperUserAlreadyRegistered.</Abstract></ReturnValue>
			<Anchor>//api/name/getOpenIdTokenForDeveloperIdentity:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/listIdentities:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Lists the identities in a pool.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityListIdentitiesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityListIdentitiesResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)listIdentities:(AWSCognitoIdentityListIdentitiesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the ListIdentities service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityListIdentitiesResponse. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/listIdentities:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/listIdentityPools:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Lists all of the Cognito identity pools registered for your account.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityListIdentityPoolsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityListIdentityPoolsResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)listIdentityPools:(AWSCognitoIdentityListIdentityPoolsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the ListIdentityPools service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityListIdentityPoolsResponse. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/listIdentityPools:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/lookupDeveloperIdentity:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Retrieves the &lt;code&gt;IdentityID&lt;/code&gt; associated with a &lt;code&gt;DeveloperUserIdentifier&lt;/code&gt; or the list of &lt;code&gt;DeveloperUserIdentifier&lt;/code&gt;s associated with an &lt;code&gt;IdentityId&lt;/code&gt; for an existing identity. Either &lt;code&gt;IdentityID&lt;/code&gt; or &lt;code&gt;DeveloperUserIdentifier&lt;/code&gt; must not be null. If you supply only one of these values, the other value will be searched in the database and returned as a part of the response. If you supply both, &lt;code&gt;DeveloperUserIdentifier&lt;/code&gt; will be matched against &lt;code&gt;IdentityID&lt;/code&gt;. If the values are verified against the database, the response returns both values and is the same as the request. Otherwise a &lt;code&gt;ResourceConflictException&lt;/code&gt; is thrown.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityLookupDeveloperIdentityInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityLookupDeveloperIdentityResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)lookupDeveloperIdentity:(AWSCognitoIdentityLookupDeveloperIdentityInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the LookupDeveloperIdentity service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityLookupDeveloperIdentityResponse. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/lookupDeveloperIdentity:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/mergeDeveloperIdentities:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Merges two users having different &lt;code&gt;IdentityId&lt;/code&gt;s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (&lt;code&gt;SourceUserIdentifier&lt;/code&gt;) with the &lt;code&gt;IdentityId&lt;/code&gt; of the &lt;code&gt;DestinationUserIdentifier&lt;/code&gt;. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityMergeDeveloperIdentitiesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityMergeDeveloperIdentitiesResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)mergeDeveloperIdentities:(AWSCognitoIdentityMergeDeveloperIdentitiesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the MergeDeveloperIdentities service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityMergeDeveloperIdentitiesResponse. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/mergeDeveloperIdentities:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/setIdentityPoolRoles:</TokenIdentifier>
			<Abstract type="html">SetIdentityPoolRoles</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentitySetIdentityPoolRolesInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)setIdentityPoolRoles:(AWSCognitoIdentitySetIdentityPoolRolesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the SetIdentityPoolRoles service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will be nil. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/setIdentityPoolRoles:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/unlinkDeveloperIdentity:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Unlinks a &lt;code&gt;DeveloperUserIdentifier&lt;/code&gt; from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityUnlinkDeveloperIdentityInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)unlinkDeveloperIdentity:(AWSCognitoIdentityUnlinkDeveloperIdentityInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the UnlinkDeveloperIdentity service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will be nil. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/unlinkDeveloperIdentity:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/unlinkIdentity:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Unlinks a federated identity from an existing account. Unlinked logins will be considered new identities next time they are seen. Removing the last linked login will make this identity inaccessible.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityUnlinkIdentityInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)unlinkIdentity:(AWSCognitoIdentityUnlinkIdentityInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the UnlinkIdentity service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will be nil. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/unlinkIdentity:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentity/updateIdentityPool:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Updates a user pool.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentity.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityIdentityPool</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityIdentityPool</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BFTask *)updateIdentityPool:(AWSCognitoIdentityIdentityPool *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the UpdateIdentityPool service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of BFTask. On successful execution, task.result will contain an instance of AWSCognitoIdentityIdentityPool. On failed execution, task.error may contain an NSError with AWSCognitoIdentityErrorDomain domian and the following error code: AWSCognitoIdentityErrorInvalidParameter, AWSCognitoIdentityErrorResourceNotFound, AWSCognitoIdentityErrorNotAuthorized, AWSCognitoIdentityErrorResourceConflict, AWSCognitoIdentityErrorTooManyRequests, AWSCognitoIdentityErrorInternalError.</Abstract></ReturnValue>
			<Anchor>//api/name/updateIdentityPool:</Anchor>
            <NodeRef refid="118"/>
		</Token>
		
        
        
	</File>
</Tokens>