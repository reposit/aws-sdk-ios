<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCloudWatch.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatch</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This is the &lt;i&gt;Amazon CloudWatch API Reference&lt;/i&gt;. This guide provides detailed information about Amazon CloudWatch actions, data types, parameters, and errors. For detailed information about Amazon CloudWatch features and their associated API calls, go to the Regions and Endpoints: Itemized regions and endpoints for all AWS products.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://monitoring.amazonaws.com/doc/2010-08-01/CloudWatch.wsdl&quot;&gt;WSDL Location&lt;/a&gt;: http://monitoring.amazonaws.com/doc/2010-08-01/CloudWatch.wsdl&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In addition to using the Amazon CloudWatch API, you can also use the following SDKs and third-party libraries to access Amazon CloudWatch programmatically.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;AWS Windows and .NET Developer Center&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
            
			
			<NodeRef refid="90"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/setConfiguration:</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCloudWatch/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCloudWatch/defaultCloudWatch</TokenIdentifier>
			<Abstract type="html">Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with defaultServiceConfiguration from [AWSServiceManager defaultServiceManager]. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
			<Declaration>+ (instancetype)defaultCloudWatch</Declaration>
			
			<ReturnValue><Abstract type="html">The default service client.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultCloudWatch</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCloudWatch/registerCloudWatchWithConfiguration:forKey:</TokenIdentifier>
			<Abstract type="html">Creates a service client with the given service configuration and registers it for the key.</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
			<Declaration>+ (void)registerCloudWatchWithConfiguration:(AWSServiceConfiguration *)configuration forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">A service configuration object.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerCloudWatchWithConfiguration:forKey:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCloudWatch/CloudWatchForKey:</TokenIdentifier>
			<Abstract type="html">Retrieves the service client associated with the key. You need to call + registerCloudWatchWithConfiguration:forKey: before invoking this method. If + registerCloudWatchWithConfiguration:forKey: has not been called in advance or the key does not exist, this method returns nil.</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
			<Declaration>+ (instancetype)CloudWatchForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of the service client.</Abstract></ReturnValue>
			<Anchor>//api/name/CloudWatchForKey:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSCloudWatch/removeCloudWatchForKey:</TokenIdentifier>
			<Abstract type="html">Removes the service client associated with the key and release it.</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
			<Declaration>+ (void)removeCloudWatchForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeCloudWatchForKey:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/initWithConfiguration:</TokenIdentifier>
			<Abstract type="html">Instantiates the service client with the given service configuration.</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithConfiguration:(AWSServiceConfiguration *)configuration</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">The service configuration object.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of the service client.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithConfiguration:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/deleteAlarms:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Deletes all specified alarms. In the event of an error, no alarms are deleted. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchDeleteAlarmsInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)deleteAlarms:(AWSCloudWatchDeleteAlarmsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeleteAlarms service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will be nil. On failed execution, task.error may contain an NSError with AWSCloudWatchErrorDomain domain and the following error code: AWSCloudWatchErrorResourceNotFound.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteAlarms:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/describeAlarmHistory:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Retrieves history for the specified alarm. Filter alarms by date range or item type. If an alarm name is not specified, Amazon CloudWatch returns histories for all of the owner&apos;s alarms. &lt;/p&gt;&lt;note&gt; Amazon CloudWatch retains the history of an alarm for two weeks, whether or not you delete the alarm. &lt;/note&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchDescribeAlarmHistoryInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchDescribeAlarmHistoryOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)describeAlarmHistory:(AWSCloudWatchDescribeAlarmHistoryInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeAlarmHistory service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSCloudWatchDescribeAlarmHistoryOutput. On failed execution, task.error may contain an NSError with AWSCloudWatchErrorDomain domain and the following error code: AWSCloudWatchErrorInvalidNextToken.</Abstract></ReturnValue>
			<Anchor>//api/name/describeAlarmHistory:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/describeAlarms:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Retrieves alarms with the specified names. If no name is specified, all alarms for the user are returned. Alarms can be retrieved by using only a prefix for the alarm name, the alarm state, or a prefix for any action. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchDescribeAlarmsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchDescribeAlarmsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)describeAlarms:(AWSCloudWatchDescribeAlarmsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeAlarms service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSCloudWatchDescribeAlarmsOutput. On failed execution, task.error may contain an NSError with AWSCloudWatchErrorDomain domain and the following error code: AWSCloudWatchErrorInvalidNextToken.</Abstract></ReturnValue>
			<Anchor>//api/name/describeAlarms:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/describeAlarmsForMetric:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Retrieves all alarms for a single metric. Specify a statistic, period, or unit to filter the set of alarms further. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchDescribeAlarmsForMetricInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchDescribeAlarmsForMetricOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)describeAlarmsForMetric:(AWSCloudWatchDescribeAlarmsForMetricInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeAlarmsForMetric service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSCloudWatchDescribeAlarmsForMetricOutput.</Abstract></ReturnValue>
			<Anchor>//api/name/describeAlarmsForMetric:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/disableAlarmActions:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Disables actions for the specified alarms. When an alarm&apos;s actions are disabled the alarm&apos;s state may change, but none of the alarm&apos;s actions will execute. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchDisableAlarmActionsInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)disableAlarmActions:(AWSCloudWatchDisableAlarmActionsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DisableAlarmActions service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will be nil.</Abstract></ReturnValue>
			<Anchor>//api/name/disableAlarmActions:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/enableAlarmActions:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Enables actions for the specified alarms. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchEnableAlarmActionsInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)enableAlarmActions:(AWSCloudWatchEnableAlarmActionsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the EnableAlarmActions service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will be nil.</Abstract></ReturnValue>
			<Anchor>//api/name/enableAlarmActions:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/getMetricStatistics:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Gets statistics for the specified metric. &lt;/p&gt;&lt;p&gt; The maximum number of data points returned from a single &lt;code&gt;GetMetricStatistics&lt;/code&gt; request is 1,440, wereas the maximum number of data points that can be queried is 50,850. If you make a request that generates more than 1,440 data points, Amazon CloudWatch returns an error. In such a case, you can alter the request by narrowing the specified time range or increasing the specified period. Alternatively, you can make multiple requests across adjacent time ranges. &lt;/p&gt;&lt;p&gt; Amazon CloudWatch aggregates data points based on the length of the &lt;code&gt;period&lt;/code&gt; that you specify. For example, if you request statistics with a one-minute granularity, Amazon CloudWatch aggregates data points with time stamps that fall within the same one-minute period. In such a case, the data points queried can greatly outnumber the data points returned. &lt;/p&gt;&lt;p&gt; The following examples show various statistics allowed by the data point query maximum of 50,850 when you call &lt;code&gt;GetMetricStatistics&lt;/code&gt; on Amazon EC2 instances with detailed (one-minute) monitoring enabled: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;Statistics for up to 400 instances for a span of one hour&lt;/li&gt;&lt;li&gt;Statistics for up to 35 instances over a span of 24 hours&lt;/li&gt;&lt;li&gt;Statistics for up to 2 instances over a span of 2 weeks&lt;/li&gt;&lt;/ul&gt;&lt;p&gt; For information about the namespace, metric names, and dimensions that other Amazon Web Services products use to send metrics to Cloudwatch, go to Amazon CloudWatch Metrics, Namespaces, and Dimensions Reference in the &lt;i&gt;Amazon CloudWatch Developer Guide&lt;/i&gt;. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchGetMetricStatisticsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchGetMetricStatisticsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)getMetricStatistics:(AWSCloudWatchGetMetricStatisticsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetMetricStatistics service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSCloudWatchGetMetricStatisticsOutput. On failed execution, task.error may contain an NSError with AWSCloudWatchErrorDomain domain and the following error code: AWSCloudWatchErrorInvalidParameterValue, AWSCloudWatchErrorMissingRequiredParameter, AWSCloudWatchErrorInvalidParameterCombination, AWSCloudWatchErrorInternalService.</Abstract></ReturnValue>
			<Anchor>//api/name/getMetricStatistics:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/listMetrics:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Returns a list of valid metrics stored for the AWS account owner. Returned metrics can be used with &lt;a&gt;GetMetricStatistics&lt;/a&gt; to obtain statistical data for a given metric. &lt;/p&gt;&lt;note&gt; Up to 500 results are returned for any one call. To retrieve further results, use returned &lt;code&gt;NextToken&lt;/code&gt; values with subsequent &lt;code&gt;ListMetrics&lt;/code&gt; operations. &lt;/note&gt;&lt;note&gt; If you create a metric with the &lt;a&gt;PutMetricData&lt;/a&gt; action, allow up to fifteen minutes for the metric to appear in calls to the &lt;code&gt;ListMetrics&lt;/code&gt; action. Statistics about the metric, however, are available sooner using &lt;a&gt;GetMetricStatistics&lt;/a&gt;. &lt;/note&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchListMetricsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchListMetricsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)listMetrics:(AWSCloudWatchListMetricsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the ListMetrics service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSCloudWatchListMetricsOutput. On failed execution, task.error may contain an NSError with AWSCloudWatchErrorDomain domain and the following error code: AWSCloudWatchErrorInternalService, AWSCloudWatchErrorInvalidParameterValue.</Abstract></ReturnValue>
			<Anchor>//api/name/listMetrics:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/putMetricAlarm:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Creates or updates an alarm and associates it with the specified Amazon CloudWatch metric. Optionally, this operation can associate one or more Amazon Simple Notification Service resources with the alarm. &lt;/p&gt;&lt;p&gt; When this operation creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is evaluated and its &lt;code&gt;StateValue&lt;/code&gt; is set appropriately. Any actions associated with the &lt;code&gt;StateValue&lt;/code&gt; is then executed. &lt;/p&gt;&lt;note&gt; When updating an existing alarm, its &lt;code&gt;StateValue&lt;/code&gt; is left unchanged. &lt;/note&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchPutMetricAlarmInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)putMetricAlarm:(AWSCloudWatchPutMetricAlarmInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the PutMetricAlarm service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will be nil. On failed execution, task.error may contain an NSError with AWSCloudWatchErrorDomain domain and the following error code: AWSCloudWatchErrorLimitExceeded.</Abstract></ReturnValue>
			<Anchor>//api/name/putMetricAlarm:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/putMetricData:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Publishes metric data points to Amazon CloudWatch. Amazon Cloudwatch associates the data points with the specified metric. If the specified metric does not exist, Amazon CloudWatch creates the metric. It can take up to fifteen minutes for a new metric to appear in calls to the &lt;a&gt;ListMetrics&lt;/a&gt; action.&lt;/p&gt;&lt;p&gt; The size of a &lt;function&gt;PutMetricData&lt;/function&gt; request is limited to 8 KB for HTTP GET requests and 40 KB for HTTP POST requests. &lt;/p&gt;&lt;important&gt; Although the &lt;code&gt;Value&lt;/code&gt; parameter accepts numbers of type &lt;code&gt;Double&lt;/code&gt;, Amazon CloudWatch truncates values with very large exponents. Values with base-10 exponents greater than 126 (1 x 10^126) are truncated. Likewise, values with base-10 exponents less than -130 (1 x 10^-130) are also truncated. &lt;/important&gt;&lt;p&gt;Data that is timestamped 24 hours or more in the past may take in excess of 48 hours to become available from submission time using &lt;code&gt;GetMetricStatistics&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchPutMetricDataInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)putMetricData:(AWSCloudWatchPutMetricDataInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the PutMetricData service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will be nil. On failed execution, task.error may contain an NSError with AWSCloudWatchErrorDomain domain and the following error code: AWSCloudWatchErrorInvalidParameterValue, AWSCloudWatchErrorMissingRequiredParameter, AWSCloudWatchErrorInvalidParameterCombination, AWSCloudWatchErrorInternalService.</Abstract></ReturnValue>
			<Anchor>//api/name/putMetricData:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatch/setAlarmState:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; Temporarily sets the state of an alarm. When the updated &lt;code&gt;StateValue&lt;/code&gt; differs from the previous value, the action configured for the appropriate state is invoked. This is not a permanent change. The next periodic alarm check (in about a minute) will set the alarm to its actual state. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchSetAlarmStateInput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask *)setAlarmState:(AWSCloudWatchSetAlarmStateInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the SetAlarmState service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will be nil. On failed execution, task.error may contain an NSError with AWSCloudWatchErrorDomain domain and the following error code: AWSCloudWatchErrorResourceNotFound, AWSCloudWatchErrorInvalidFormat.</Abstract></ReturnValue>
			<Anchor>//api/name/setAlarmState:</Anchor>
            <NodeRef refid="90"/>
		</Token>
		
        
        
	</File>
</Tokens>