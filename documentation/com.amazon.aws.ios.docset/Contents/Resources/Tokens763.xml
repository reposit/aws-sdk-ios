<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSLambdaCreateFunctionRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaCreateFunctionRequest</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
            
			
			<NodeRef refid="763"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/setCode:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The code for the Lambda function. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AWSLambdaFunctionCode *code</Declaration>
			
			
			<Anchor>//api/name/code</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/code</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The code for the Lambda function. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AWSLambdaFunctionCode *code</Declaration>
			
			
			<Anchor>//api/name/code</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaCreateFunctionRequest/code</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The code for the Lambda function. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AWSLambdaFunctionCode *code</Declaration>
			
			
			<Anchor>//api/name/code</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/setDetail:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *detail</Declaration>
			
			
			<Anchor>//api/name/detail</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/detail</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *detail</Declaration>
			
			
			<Anchor>//api/name/detail</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaCreateFunctionRequest/detail</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *detail</Declaration>
			
			
			<Anchor>//api/name/detail</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/setFunctionName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name you want to assign to the function you are uploading. You can specify an unqualified function name (for example, &quot;Thumbnail&quot;) or you can specify Amazon Resource Name (ARN) of the function (for example, &quot;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&quot;). AWS Lambda also allows you to specify only the account ID qualifier (for example, &quot;account-id:Thumbnail&quot;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. The function names appear in the console and are returned in the &lt;a&gt;ListFunctions&lt;/a&gt; API. Function names are used to specify functions to other AWS Lambda APIs, such as &lt;a&gt;Invoke&lt;/a&gt;. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/functionName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name you want to assign to the function you are uploading. You can specify an unqualified function name (for example, &quot;Thumbnail&quot;) or you can specify Amazon Resource Name (ARN) of the function (for example, &quot;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&quot;). AWS Lambda also allows you to specify only the account ID qualifier (for example, &quot;account-id:Thumbnail&quot;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. The function names appear in the console and are returned in the &lt;a&gt;ListFunctions&lt;/a&gt; API. Function names are used to specify functions to other AWS Lambda APIs, such as &lt;a&gt;Invoke&lt;/a&gt;. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaCreateFunctionRequest/functionName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name you want to assign to the function you are uploading. You can specify an unqualified function name (for example, &quot;Thumbnail&quot;) or you can specify Amazon Resource Name (ARN) of the function (for example, &quot;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&quot;). AWS Lambda also allows you to specify only the account ID qualifier (for example, &quot;account-id:Thumbnail&quot;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. The function names appear in the console and are returned in the &lt;a&gt;ListFunctions&lt;/a&gt; API. Function names are used to specify functions to other AWS Lambda APIs, such as &lt;a&gt;Invoke&lt;/a&gt;. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/setHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The function within your code that Lambda calls to begin execution. For Node.js, it is the &lt;i&gt;module-name&lt;/i&gt;.&lt;i&gt;export&lt;/i&gt; value in your function. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *handler</Declaration>
			
			
			<Anchor>//api/name/handler</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/handler</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The function within your code that Lambda calls to begin execution. For Node.js, it is the &lt;i&gt;module-name&lt;/i&gt;.&lt;i&gt;export&lt;/i&gt; value in your function. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *handler</Declaration>
			
			
			<Anchor>//api/name/handler</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaCreateFunctionRequest/handler</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The function within your code that Lambda calls to begin execution. For Node.js, it is the &lt;i&gt;module-name&lt;/i&gt;.&lt;i&gt;export&lt;/i&gt; value in your function. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *handler</Declaration>
			
			
			<Anchor>//api/name/handler</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/setMemorySize:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU and memory allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *memorySize</Declaration>
			
			
			<Anchor>//api/name/memorySize</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/memorySize</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU and memory allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *memorySize</Declaration>
			
			
			<Anchor>//api/name/memorySize</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaCreateFunctionRequest/memorySize</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU and memory allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *memorySize</Declaration>
			
			
			<Anchor>//api/name/memorySize</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/setRole:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. For more information, see AWS Lambda: How it Works&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *role</Declaration>
			
			
			<Anchor>//api/name/role</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/role</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. For more information, see AWS Lambda: How it Works&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *role</Declaration>
			
			
			<Anchor>//api/name/role</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaCreateFunctionRequest/role</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. For more information, see AWS Lambda: How it Works&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *role</Declaration>
			
			
			<Anchor>//api/name/role</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/setRuntime:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The runtime environment for the Lambda function you are uploading. Currently, Lambda supports only &quot;nodejs&quot; as the runtime.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLambdaRuntime runtime</Declaration>
			
			
			<Anchor>//api/name/runtime</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/runtime</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The runtime environment for the Lambda function you are uploading. Currently, Lambda supports only &quot;nodejs&quot; as the runtime.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLambdaRuntime runtime</Declaration>
			
			
			<Anchor>//api/name/runtime</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaCreateFunctionRequest/runtime</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The runtime environment for the Lambda function you are uploading. Currently, Lambda supports only &quot;nodejs&quot; as the runtime.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLambdaRuntime runtime</Declaration>
			
			
			<Anchor>//api/name/runtime</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/setTimeout:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *timeout</Declaration>
			
			
			<Anchor>//api/name/timeout</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaCreateFunctionRequest/timeout</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *timeout</Declaration>
			
			
			<Anchor>//api/name/timeout</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaCreateFunctionRequest/timeout</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *timeout</Declaration>
			
			
			<Anchor>//api/name/timeout</Anchor>
            <NodeRef refid="763"/>
		</Token>
		
        
        
	</File>
</Tokens>