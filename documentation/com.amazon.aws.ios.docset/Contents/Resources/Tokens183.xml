<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSDynamoDBQueryInput.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSDynamoDBQueryInput</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents the input of a &lt;i&gt;Query&lt;/i&gt; operation.&lt;/p&gt;
Required parameters: [TableName, KeyConditions]</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
            
			
			<NodeRef refid="183"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setAttributesToGet:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.&lt;/p&gt;&lt;p&gt;Note that &lt;i&gt;AttributesToGet&lt;/i&gt; has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.&lt;/p&gt;&lt;p&gt;You cannot use both &lt;i&gt;AttributesToGet&lt;/i&gt; and &lt;i&gt;Select&lt;/i&gt; together in a &lt;i&gt;Query&lt;/i&gt; request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for &lt;i&gt;Select&lt;/i&gt;.)&lt;/p&gt;&lt;p&gt;If you are querying a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.&lt;/p&gt;&lt;p&gt;If you are querying a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *attributesToGet</Declaration>
			
			
			<Anchor>//api/name/attributesToGet</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/attributesToGet</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.&lt;/p&gt;&lt;p&gt;Note that &lt;i&gt;AttributesToGet&lt;/i&gt; has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.&lt;/p&gt;&lt;p&gt;You cannot use both &lt;i&gt;AttributesToGet&lt;/i&gt; and &lt;i&gt;Select&lt;/i&gt; together in a &lt;i&gt;Query&lt;/i&gt; request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for &lt;i&gt;Select&lt;/i&gt;.)&lt;/p&gt;&lt;p&gt;If you are querying a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.&lt;/p&gt;&lt;p&gt;If you are querying a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *attributesToGet</Declaration>
			
			
			<Anchor>//api/name/attributesToGet</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/attributesToGet</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.&lt;/p&gt;&lt;p&gt;Note that &lt;i&gt;AttributesToGet&lt;/i&gt; has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.&lt;/p&gt;&lt;p&gt;You cannot use both &lt;i&gt;AttributesToGet&lt;/i&gt; and &lt;i&gt;Select&lt;/i&gt; together in a &lt;i&gt;Query&lt;/i&gt; request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for &lt;i&gt;Select&lt;/i&gt;.)&lt;/p&gt;&lt;p&gt;If you are querying a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.&lt;/p&gt;&lt;p&gt;If you are querying a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *attributesToGet</Declaration>
			
			
			<Anchor>//api/name/attributesToGet</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setConditionalOperator:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A logical operator to apply to the conditions in the &lt;i&gt;QueryFilter&lt;/i&gt; map:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;AND&lt;/code&gt; - If &lt;i&gt;all&lt;/i&gt; of the conditions evaluate to true, then the entire map evaluates to true.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;OR&lt;/code&gt; - If &lt;i&gt;at least one&lt;/i&gt; of the conditions evaluate to true, then the entire map evaluates to true.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you omit &lt;i&gt;ConditionalOperator&lt;/i&gt;, then &lt;code&gt;AND&lt;/code&gt; is the default.&lt;/p&gt;&lt;p&gt;The operation will succeed only if the entire map evaluates to true.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBConditionalOperator conditionalOperator</Declaration>
			
			
			<Anchor>//api/name/conditionalOperator</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/conditionalOperator</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A logical operator to apply to the conditions in the &lt;i&gt;QueryFilter&lt;/i&gt; map:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;AND&lt;/code&gt; - If &lt;i&gt;all&lt;/i&gt; of the conditions evaluate to true, then the entire map evaluates to true.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;OR&lt;/code&gt; - If &lt;i&gt;at least one&lt;/i&gt; of the conditions evaluate to true, then the entire map evaluates to true.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you omit &lt;i&gt;ConditionalOperator&lt;/i&gt;, then &lt;code&gt;AND&lt;/code&gt; is the default.&lt;/p&gt;&lt;p&gt;The operation will succeed only if the entire map evaluates to true.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBConditionalOperator conditionalOperator</Declaration>
			
			
			<Anchor>//api/name/conditionalOperator</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/conditionalOperator</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A logical operator to apply to the conditions in the &lt;i&gt;QueryFilter&lt;/i&gt; map:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;AND&lt;/code&gt; - If &lt;i&gt;all&lt;/i&gt; of the conditions evaluate to true, then the entire map evaluates to true.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;OR&lt;/code&gt; - If &lt;i&gt;at least one&lt;/i&gt; of the conditions evaluate to true, then the entire map evaluates to true.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If you omit &lt;i&gt;ConditionalOperator&lt;/i&gt;, then &lt;code&gt;AND&lt;/code&gt; is the default.&lt;/p&gt;&lt;p&gt;The operation will succeed only if the entire map evaluates to true.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBConditionalOperator conditionalOperator</Declaration>
			
			
			<Anchor>//api/name/conditionalOperator</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setConsistentRead:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, then the operation uses strongly consistent reads; otherwise, eventually consistent reads are used.&lt;/p&gt;&lt;p&gt;Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with &lt;i&gt;ConsistentRead&lt;/i&gt; set to &lt;code&gt;true&lt;/code&gt;, you will receive an error message.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *consistentRead</Declaration>
			
			
			<Anchor>//api/name/consistentRead</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/consistentRead</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, then the operation uses strongly consistent reads; otherwise, eventually consistent reads are used.&lt;/p&gt;&lt;p&gt;Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with &lt;i&gt;ConsistentRead&lt;/i&gt; set to &lt;code&gt;true&lt;/code&gt;, you will receive an error message.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *consistentRead</Declaration>
			
			
			<Anchor>//api/name/consistentRead</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/consistentRead</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, then the operation uses strongly consistent reads; otherwise, eventually consistent reads are used.&lt;/p&gt;&lt;p&gt;Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with &lt;i&gt;ConsistentRead&lt;/i&gt; set to &lt;code&gt;true&lt;/code&gt;, you will receive an error message.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *consistentRead</Declaration>
			
			
			<Anchor>//api/name/consistentRead</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setExclusiveStartKey:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The primary key of the first item that this operation will evaluate. Use the value that was returned for &lt;i&gt;LastEvaluatedKey&lt;/i&gt; in the previous operation.&lt;/p&gt;&lt;p&gt;The data type for &lt;i&gt;ExclusiveStartKey&lt;/i&gt; must be String, Number or Binary. No set data types are allowed.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *exclusiveStartKey</Declaration>
			
			
			<Anchor>//api/name/exclusiveStartKey</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/exclusiveStartKey</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The primary key of the first item that this operation will evaluate. Use the value that was returned for &lt;i&gt;LastEvaluatedKey&lt;/i&gt; in the previous operation.&lt;/p&gt;&lt;p&gt;The data type for &lt;i&gt;ExclusiveStartKey&lt;/i&gt; must be String, Number or Binary. No set data types are allowed.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *exclusiveStartKey</Declaration>
			
			
			<Anchor>//api/name/exclusiveStartKey</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/exclusiveStartKey</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The primary key of the first item that this operation will evaluate. Use the value that was returned for &lt;i&gt;LastEvaluatedKey&lt;/i&gt; in the previous operation.&lt;/p&gt;&lt;p&gt;The data type for &lt;i&gt;ExclusiveStartKey&lt;/i&gt; must be String, Number or Binary. No set data types are allowed.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *exclusiveStartKey</Declaration>
			
			
			<Anchor>//api/name/exclusiveStartKey</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setIndexName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of an index to query. This can be any local secondary index or global secondary index on the table.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *indexName</Declaration>
			
			
			<Anchor>//api/name/indexName</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/indexName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of an index to query. This can be any local secondary index or global secondary index on the table.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *indexName</Declaration>
			
			
			<Anchor>//api/name/indexName</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/indexName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of an index to query. This can be any local secondary index or global secondary index on the table.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *indexName</Declaration>
			
			
			<Anchor>//api/name/indexName</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setKeyConditions:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The selection criteria for the query.&lt;/p&gt;&lt;p&gt;For a query on a table, you can only have conditions on the table primary key attributes. You &lt;i&gt;must&lt;/i&gt; specify the hash key attribute name and value as an &lt;code&gt;EQ&lt;/code&gt; condition. You can &lt;i&gt;optionally&lt;/i&gt; specify a second condition, referring to the range key attribute.&lt;/p&gt;&lt;p&gt;For a query on an index, you can only have conditions on the index key attributes. You &lt;i&gt;must&lt;/i&gt; specify the index hash attribute name and value as an EQ condition. You can &lt;i&gt;optionally&lt;/i&gt; specify a second condition, referring to the index key range attribute.&lt;/p&gt;&lt;p&gt;If you specify more than one condition in the &lt;i&gt;KeyConditions&lt;/i&gt; map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the &lt;i&gt;ConditionalOperator&lt;/i&gt; parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)&lt;/p&gt;&lt;p&gt;Each &lt;i&gt;KeyConditions&lt;/i&gt; element consists of an attribute name to compare, along with the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the &lt;i&gt;ComparisonOperator&lt;/i&gt; being used.&lt;/p&gt;&lt;p&gt;For type Number, value comparisons are numeric.&lt;/p&gt;&lt;p&gt;String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;aa&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCIIprintablecharacters.&lt;/p&gt;&lt;p&gt;For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;i&gt;ComparisonOperator&lt;/i&gt; - A comparator for evaluating attributes. For example, equals, greater than, less than, etc.&lt;/p&gt;&lt;p&gt;For &lt;i&gt;KeyConditions&lt;/i&gt;, only the following comparison operators are supported:&lt;/p&gt;&lt;p&gt;&lt;code&gt;EQ | LE | LT | GE | GT | BEGINSWITH | BETWEEN&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The following are descriptions of these comparison operators.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;EQ&lt;/code&gt; : Equal. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;LE&lt;/code&gt; : Less than or equal. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;LT&lt;/code&gt; : Less than. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;GE&lt;/code&gt; : Greater than or equal. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;GT&lt;/code&gt; : Greater than. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;BEGINSWITH&lt;/code&gt; : checks for a prefix. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String or Binary (not a Number or a set). The target attribute of the comparison must be a String or Binary (not a Number or a set).&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt; : Greater than or equal to the first value, and less than or equal to the second value. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; must contain two &lt;i&gt;AttributeValue&lt;/i&gt; elements of the same type, either String, Number, or Binary (not a set). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For usage examples of &lt;i&gt;AttributeValueList&lt;/i&gt; and &lt;i&gt;ComparisonOperator&lt;/i&gt;, see Conditional Expressions in the Amazon DynamoDB Developer Guide.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *keyConditions</Declaration>
			
			
			<Anchor>//api/name/keyConditions</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/keyConditions</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The selection criteria for the query.&lt;/p&gt;&lt;p&gt;For a query on a table, you can only have conditions on the table primary key attributes. You &lt;i&gt;must&lt;/i&gt; specify the hash key attribute name and value as an &lt;code&gt;EQ&lt;/code&gt; condition. You can &lt;i&gt;optionally&lt;/i&gt; specify a second condition, referring to the range key attribute.&lt;/p&gt;&lt;p&gt;For a query on an index, you can only have conditions on the index key attributes. You &lt;i&gt;must&lt;/i&gt; specify the index hash attribute name and value as an EQ condition. You can &lt;i&gt;optionally&lt;/i&gt; specify a second condition, referring to the index key range attribute.&lt;/p&gt;&lt;p&gt;If you specify more than one condition in the &lt;i&gt;KeyConditions&lt;/i&gt; map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the &lt;i&gt;ConditionalOperator&lt;/i&gt; parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)&lt;/p&gt;&lt;p&gt;Each &lt;i&gt;KeyConditions&lt;/i&gt; element consists of an attribute name to compare, along with the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the &lt;i&gt;ComparisonOperator&lt;/i&gt; being used.&lt;/p&gt;&lt;p&gt;For type Number, value comparisons are numeric.&lt;/p&gt;&lt;p&gt;String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;aa&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCIIprintablecharacters.&lt;/p&gt;&lt;p&gt;For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;i&gt;ComparisonOperator&lt;/i&gt; - A comparator for evaluating attributes. For example, equals, greater than, less than, etc.&lt;/p&gt;&lt;p&gt;For &lt;i&gt;KeyConditions&lt;/i&gt;, only the following comparison operators are supported:&lt;/p&gt;&lt;p&gt;&lt;code&gt;EQ | LE | LT | GE | GT | BEGINSWITH | BETWEEN&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The following are descriptions of these comparison operators.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;EQ&lt;/code&gt; : Equal. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;LE&lt;/code&gt; : Less than or equal. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;LT&lt;/code&gt; : Less than. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;GE&lt;/code&gt; : Greater than or equal. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;GT&lt;/code&gt; : Greater than. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;BEGINSWITH&lt;/code&gt; : checks for a prefix. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String or Binary (not a Number or a set). The target attribute of the comparison must be a String or Binary (not a Number or a set).&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt; : Greater than or equal to the first value, and less than or equal to the second value. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; must contain two &lt;i&gt;AttributeValue&lt;/i&gt; elements of the same type, either String, Number, or Binary (not a set). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For usage examples of &lt;i&gt;AttributeValueList&lt;/i&gt; and &lt;i&gt;ComparisonOperator&lt;/i&gt;, see Conditional Expressions in the Amazon DynamoDB Developer Guide.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *keyConditions</Declaration>
			
			
			<Anchor>//api/name/keyConditions</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/keyConditions</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The selection criteria for the query.&lt;/p&gt;&lt;p&gt;For a query on a table, you can only have conditions on the table primary key attributes. You &lt;i&gt;must&lt;/i&gt; specify the hash key attribute name and value as an &lt;code&gt;EQ&lt;/code&gt; condition. You can &lt;i&gt;optionally&lt;/i&gt; specify a second condition, referring to the range key attribute.&lt;/p&gt;&lt;p&gt;For a query on an index, you can only have conditions on the index key attributes. You &lt;i&gt;must&lt;/i&gt; specify the index hash attribute name and value as an EQ condition. You can &lt;i&gt;optionally&lt;/i&gt; specify a second condition, referring to the index key range attribute.&lt;/p&gt;&lt;p&gt;If you specify more than one condition in the &lt;i&gt;KeyConditions&lt;/i&gt; map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the &lt;i&gt;ConditionalOperator&lt;/i&gt; parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)&lt;/p&gt;&lt;p&gt;Each &lt;i&gt;KeyConditions&lt;/i&gt; element consists of an attribute name to compare, along with the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the &lt;i&gt;ComparisonOperator&lt;/i&gt; being used.&lt;/p&gt;&lt;p&gt;For type Number, value comparisons are numeric.&lt;/p&gt;&lt;p&gt;String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;aa&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCIIprintablecharacters.&lt;/p&gt;&lt;p&gt;For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;i&gt;ComparisonOperator&lt;/i&gt; - A comparator for evaluating attributes. For example, equals, greater than, less than, etc.&lt;/p&gt;&lt;p&gt;For &lt;i&gt;KeyConditions&lt;/i&gt;, only the following comparison operators are supported:&lt;/p&gt;&lt;p&gt;&lt;code&gt;EQ | LE | LT | GE | GT | BEGINSWITH | BETWEEN&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The following are descriptions of these comparison operators.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;EQ&lt;/code&gt; : Equal. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;LE&lt;/code&gt; : Less than or equal. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;LT&lt;/code&gt; : Less than. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;GE&lt;/code&gt; : Greater than or equal. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;GT&lt;/code&gt; : Greater than. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;.&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;BEGINSWITH&lt;/code&gt; : checks for a prefix. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String or Binary (not a Number or a set). The target attribute of the comparison must be a String or Binary (not a Number or a set).&lt;/p&gt;&lt;p/&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt; : Greater than or equal to the first value, and less than or equal to the second value. &lt;/p&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; must contain two &lt;i&gt;AttributeValue&lt;/i&gt; elements of the same type, either String, Number, or Binary (not a set). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in the request, the value does not match. For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For usage examples of &lt;i&gt;AttributeValueList&lt;/i&gt; and &lt;i&gt;ComparisonOperator&lt;/i&gt;, see Conditional Expressions in the Amazon DynamoDB Developer Guide.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *keyConditions</Declaration>
			
			
			<Anchor>//api/name/keyConditions</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setLimit:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a &lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a &lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation to continue the operation. For more information, see Query and Scan in the Amazon DynamoDB Developer Guide.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *limit</Declaration>
			
			
			<Anchor>//api/name/limit</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/limit</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a &lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a &lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation to continue the operation. For more information, see Query and Scan in the Amazon DynamoDB Developer Guide.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *limit</Declaration>
			
			
			<Anchor>//api/name/limit</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/limit</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a &lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a &lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation to continue the operation. For more information, see Query and Scan in the Amazon DynamoDB Developer Guide.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *limit</Declaration>
			
			
			<Anchor>//api/name/limit</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setQueryFilter:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Evaluates the query results and returns only the desired values.&lt;/p&gt;&lt;p&gt;If you specify more than one condition in the &lt;i&gt;QueryFilter&lt;/i&gt; map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the &lt;i&gt;ConditionalOperator&lt;/i&gt; parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)&lt;/p&gt;&lt;p&gt;Each &lt;i&gt;QueryFilter&lt;/i&gt; element consists of an attribute name to compare, along with the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the &lt;i&gt;ComparisonOperator&lt;/i&gt; being used.&lt;/p&gt;&lt;p&gt;For type Number, value comparisons are numeric.&lt;/p&gt;&lt;p&gt;String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;aa&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;. For a list of code values, see API_Condition.html.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *queryFilter</Declaration>
			
			
			<Anchor>//api/name/queryFilter</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/queryFilter</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Evaluates the query results and returns only the desired values.&lt;/p&gt;&lt;p&gt;If you specify more than one condition in the &lt;i&gt;QueryFilter&lt;/i&gt; map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the &lt;i&gt;ConditionalOperator&lt;/i&gt; parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)&lt;/p&gt;&lt;p&gt;Each &lt;i&gt;QueryFilter&lt;/i&gt; element consists of an attribute name to compare, along with the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the &lt;i&gt;ComparisonOperator&lt;/i&gt; being used.&lt;/p&gt;&lt;p&gt;For type Number, value comparisons are numeric.&lt;/p&gt;&lt;p&gt;String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;aa&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;. For a list of code values, see API_Condition.html.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *queryFilter</Declaration>
			
			
			<Anchor>//api/name/queryFilter</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/queryFilter</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Evaluates the query results and returns only the desired values.&lt;/p&gt;&lt;p&gt;If you specify more than one condition in the &lt;i&gt;QueryFilter&lt;/i&gt; map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the &lt;i&gt;ConditionalOperator&lt;/i&gt; parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)&lt;/p&gt;&lt;p&gt;Each &lt;i&gt;QueryFilter&lt;/i&gt; element consists of an attribute name to compare, along with the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the &lt;i&gt;ComparisonOperator&lt;/i&gt; being used.&lt;/p&gt;&lt;p&gt;For type Number, value comparisons are numeric.&lt;/p&gt;&lt;p&gt;String value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;aa&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;. For a list of code values, see API_Condition.html.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary *queryFilter</Declaration>
			
			
			<Anchor>//api/name/queryFilter</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setReturnConsumedCapacity:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If set to &lt;code&gt;TOTAL&lt;/code&gt;, the response includes &lt;i&gt;ConsumedCapacity&lt;/i&gt; data for tables and indexes. If set to &lt;code&gt;INDEXES&lt;/code&gt;, the response includes &lt;i&gt;ConsumedCapacity&lt;/i&gt; for indexes. If set to &lt;code&gt;NONE&lt;/code&gt; (the default), &lt;i&gt;ConsumedCapacity&lt;/i&gt; is not included in the response.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBReturnConsumedCapacity returnConsumedCapacity</Declaration>
			
			
			<Anchor>//api/name/returnConsumedCapacity</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/returnConsumedCapacity</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If set to &lt;code&gt;TOTAL&lt;/code&gt;, the response includes &lt;i&gt;ConsumedCapacity&lt;/i&gt; data for tables and indexes. If set to &lt;code&gt;INDEXES&lt;/code&gt;, the response includes &lt;i&gt;ConsumedCapacity&lt;/i&gt; for indexes. If set to &lt;code&gt;NONE&lt;/code&gt; (the default), &lt;i&gt;ConsumedCapacity&lt;/i&gt; is not included in the response.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBReturnConsumedCapacity returnConsumedCapacity</Declaration>
			
			
			<Anchor>//api/name/returnConsumedCapacity</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/returnConsumedCapacity</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;If set to &lt;code&gt;TOTAL&lt;/code&gt;, the response includes &lt;i&gt;ConsumedCapacity&lt;/i&gt; data for tables and indexes. If set to &lt;code&gt;INDEXES&lt;/code&gt;, the response includes &lt;i&gt;ConsumedCapacity&lt;/i&gt; for indexes. If set to &lt;code&gt;NONE&lt;/code&gt; (the default), &lt;i&gt;ConsumedCapacity&lt;/i&gt; is not included in the response.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBReturnConsumedCapacity returnConsumedCapacity</Declaration>
			
			
			<Anchor>//api/name/returnConsumedCapacity</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setScanIndexForward:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Specifies ascending (true) or descending (false) traversal of the index. DynamoDB returns results reflecting the requested order determined by the range key. If the data type is Number, the results are returned in numeric order. For String, the results are returned in order of ASCII character code values. For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.&lt;/p&gt;&lt;p&gt;If &lt;i&gt;ScanIndexForward&lt;/i&gt; is not specified, the results are returned in ascending order.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *scanIndexForward</Declaration>
			
			
			<Anchor>//api/name/scanIndexForward</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/scanIndexForward</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Specifies ascending (true) or descending (false) traversal of the index. DynamoDB returns results reflecting the requested order determined by the range key. If the data type is Number, the results are returned in numeric order. For String, the results are returned in order of ASCII character code values. For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.&lt;/p&gt;&lt;p&gt;If &lt;i&gt;ScanIndexForward&lt;/i&gt; is not specified, the results are returned in ascending order.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *scanIndexForward</Declaration>
			
			
			<Anchor>//api/name/scanIndexForward</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/scanIndexForward</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Specifies ascending (true) or descending (false) traversal of the index. DynamoDB returns results reflecting the requested order determined by the range key. If the data type is Number, the results are returned in numeric order. For String, the results are returned in order of ASCII character code values. For Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.&lt;/p&gt;&lt;p&gt;If &lt;i&gt;ScanIndexForward&lt;/i&gt; is not specified, the results are returned in ascending order.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *scanIndexForward</Declaration>
			
			
			<Anchor>//api/name/scanIndexForward</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setSelect:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ALLATTRIBUTES&lt;/code&gt;: Returns all of the item attributes from the specified table or index. If you are querying a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required..&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt;: Allowed only when querying an index. Retrieves all attributes which have been projected into the index. If the index is configured to project all attributes, this is equivalent to specifying &lt;code&gt;ALLATTRIBUTES&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;COUNT&lt;/code&gt;: Returns the number of matching items, rather than the matching items themselves.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;SPECIFICATTRIBUTES&lt;/code&gt; : Returns only the attributes listed in &lt;i&gt;AttributesToGet&lt;/i&gt;. This is equivalent to specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without specifying any value for &lt;i&gt;Select&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;If you are querying a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.&lt;/p&gt;&lt;p&gt;If you are querying a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If neither &lt;i&gt;Select&lt;/i&gt; nor &lt;i&gt;AttributesToGet&lt;/i&gt; are specified, DynamoDB defaults to &lt;code&gt;ALLATTRIBUTES&lt;/code&gt; when accessing a table, and &lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt; when accessing an index. You cannot use both &lt;i&gt;Select&lt;/i&gt; and &lt;i&gt;AttributesToGet&lt;/i&gt; together in a single request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for &lt;i&gt;Select&lt;/i&gt;.)&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBSelect select</Declaration>
			
			
			<Anchor>//api/name/select</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/select</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ALLATTRIBUTES&lt;/code&gt;: Returns all of the item attributes from the specified table or index. If you are querying a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required..&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt;: Allowed only when querying an index. Retrieves all attributes which have been projected into the index. If the index is configured to project all attributes, this is equivalent to specifying &lt;code&gt;ALLATTRIBUTES&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;COUNT&lt;/code&gt;: Returns the number of matching items, rather than the matching items themselves.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;SPECIFICATTRIBUTES&lt;/code&gt; : Returns only the attributes listed in &lt;i&gt;AttributesToGet&lt;/i&gt;. This is equivalent to specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without specifying any value for &lt;i&gt;Select&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;If you are querying a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.&lt;/p&gt;&lt;p&gt;If you are querying a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If neither &lt;i&gt;Select&lt;/i&gt; nor &lt;i&gt;AttributesToGet&lt;/i&gt; are specified, DynamoDB defaults to &lt;code&gt;ALLATTRIBUTES&lt;/code&gt; when accessing a table, and &lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt; when accessing an index. You cannot use both &lt;i&gt;Select&lt;/i&gt; and &lt;i&gt;AttributesToGet&lt;/i&gt; together in a single request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for &lt;i&gt;Select&lt;/i&gt;.)&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBSelect select</Declaration>
			
			
			<Anchor>//api/name/select</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/select</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ALLATTRIBUTES&lt;/code&gt;: Returns all of the item attributes from the specified table or index. If you are querying a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required..&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt;: Allowed only when querying an index. Retrieves all attributes which have been projected into the index. If the index is configured to project all attributes, this is equivalent to specifying &lt;code&gt;ALLATTRIBUTES&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;COUNT&lt;/code&gt;: Returns the number of matching items, rather than the matching items themselves.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;SPECIFICATTRIBUTES&lt;/code&gt; : Returns only the attributes listed in &lt;i&gt;AttributesToGet&lt;/i&gt;. This is equivalent to specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without specifying any value for &lt;i&gt;Select&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;If you are querying a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.&lt;/p&gt;&lt;p&gt;If you are querying a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If neither &lt;i&gt;Select&lt;/i&gt; nor &lt;i&gt;AttributesToGet&lt;/i&gt; are specified, DynamoDB defaults to &lt;code&gt;ALLATTRIBUTES&lt;/code&gt; when accessing a table, and &lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt; when accessing an index. You cannot use both &lt;i&gt;Select&lt;/i&gt; and &lt;i&gt;AttributesToGet&lt;/i&gt; together in a single request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is &lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for &lt;i&gt;Select&lt;/i&gt;.)&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBSelect select</Declaration>
			
			
			<Anchor>//api/name/select</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/setTableName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the table containing the requested items. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *tableName</Declaration>
			
			
			<Anchor>//api/name/tableName</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBQueryInput/tableName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the table containing the requested items. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *tableName</Declaration>
			
			
			<Anchor>//api/name/tableName</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBQueryInput/tableName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the table containing the requested items. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *tableName</Declaration>
			
			
			<Anchor>//api/name/tableName</Anchor>
            <NodeRef refid="183"/>
		</Token>
		
        
	</File>
</Tokens>